/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../../.config/yarn/global/node_modules/regenerator-runtime/runtime.js":
/*!********************************************************************************!*\
  !*** ../../../.config/yarn/global/node_modules/regenerator-runtime/runtime.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) {\n    obj[key] = desc.value;\n  };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    });\n    return generator;\n  }\n  exports.wrap = wrap;\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: true\n  });\n  defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: true\n  });\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction ||\n    // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n    var previousPromise;\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n      return previousPromise =\n      // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,\n      // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    }\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", {\n      value: enqueue\n    });\n  }\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n      context.method = method;\n      context.arg = arg;\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n      return ContinueSentinel;\n    }\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n    var info = record.arg;\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, \"Generator\");\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  });\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n    this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n  exports.keys = function (val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n            next.value = undefined;\n            next.done = true;\n            return next;\n          };\n        return next.next = next;\n      }\n    }\n    // Return an iterator with no values.\n    return {\n      next: doneResult\n    };\n  }\n  exports.values = values;\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n  Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function () {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) {\n        throw exception;\n      }\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n        return !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n      return this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n      return ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n      return ContinueSentinel;\n    }\n  };\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n}(\n// If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n true ? module.exports : 0);\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../.config/yarn/global/node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./src/common/gl/index.ts":
/*!********************************!*\
  !*** ./src/common/gl/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.renderFullScreenCanvas = exports.simpleInit = exports.createProgram = exports.createGlContext = exports.useInjectGlData = exports.createInjectAttrGroup = exports.setBlend = exports.ensureCanvas = exports.DEFAULT_GL2_FRAG = exports.DEFAULT_GL1_FRAG = exports.DEFAULT_GL2_VERT = exports.DEFAULT_GL1_VERT = void 0;\nexports.DEFAULT_GL1_VERT = `\nattribute vec2 a_position;\nvarying vec2 v_texCoord;\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_texCoord = (a_position + 1.0) * 0.5;\n}`;\nconst simpleVertHeader = `#version 300 es\n\nout vec2 v_texCoord;\n\n`;\nexports.DEFAULT_GL2_VERT = `${simpleVertHeader}\n\nlayout(location = 0) in vec2 a_position;\n\nvoid main() {\n    // 计算顶点的最终位置\n    gl_Position = vec4(a_position, 0.0, 1.0);\n\n    // 将纹理坐标传递给片段着色器\n    v_texCoord = (a_position + 1.0) * 0.5;\n}\n`;\nexports.DEFAULT_GL1_FRAG = `\nprecision mediump float;\n\nvoid main(){\n    gl_FragColor=vec4(0.);\n}\n`;\nconst simpleFragHeader = `#version 300 es\n\n// 指定默认精度为 highp\nprecision highp float;\nprecision highp sampler2D; // 指定精度和 sampler2D 类型\n\nin vec2 v_texCoord; // 从顶点着色器传入的纹理坐标\nout vec4 fragColor; // 片段颜色输出\n\nuniform vec2 u_resolution;\nuniform float u_time;\nuniform vec3 iResolution;\nuniform vec2 iMouse;\nuniform float iTime;\n\n#define fragCoord vec2(v_texCoord * iResolution.xy)\n\n`;\nexports.DEFAULT_GL2_FRAG = `${simpleFragHeader}\n\nvoid main(){\n    fragColor = vec4(fragCoord.x / iResolution.x , 0., 0., 1.);\n}\n\n`;\nconst DEFAULT_RATIO = Math.min((_b = (_a = globalThis.window) === null || _a === void 0 ? void 0 : _a.devicePixelRatio) !== null && _b !== void 0 ? _b : 1, 2);\nfunction ensureCanvas(canvas) {\n  let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RATIO;\n  canvas.width = canvas.clientWidth * ratio;\n  canvas.height = canvas.clientHeight * ratio;\n}\nexports.ensureCanvas = ensureCanvas;\nfunction setBlend(gl, blendMode) {\n  gl.enable(gl.BLEND);\n  switch (blendMode) {\n    case 'add':\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      break;\n    case 'multiply':\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      gl.blendFuncSeparate(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      break;\n    case 'normal':\n    default:\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n      break;\n  }\n}\nexports.setBlend = setBlend;\nfunction injectAttr(gl, program, value, fieldSet) {\n  const data = new Float32Array(value);\n  const vBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer);\n  let startOffset = 0;\n  const totalLen = fieldSet.reduce((d, c) => d += c.length, 0);\n  fieldSet.forEach(field => {\n    const {\n      name,\n      length\n    } = field;\n    const positionAttributeLocation = gl.getAttribLocation(program, name);\n    if (positionAttributeLocation < 0) {\n      console.error(`name<${name}> does not found in vertShader`);\n    }\n    gl.vertexAttribPointer(positionAttributeLocation, length, gl.FLOAT, false, data.BYTES_PER_ELEMENT * totalLen, data.BYTES_PER_ELEMENT * startOffset);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    startOffset += length;\n  });\n  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n}\nfunction createUBO(gl, program) {\n  let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  const ubo = gl.createBuffer();\n  const data = Float32Array.from(value);\n  gl.bindBuffer(gl.UNIFORM_BUFFER, ubo);\n  gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);\n  gl.bindBufferBase(gl.UNIFORM_BUFFER, index, ubo);\n}\nfunction initFBO(gl) {\n  const fbo = gl.createFramebuffer();\n  // 创建对应的纹理\n  const texture = createTexture(gl);\n  // 绑定纹理到FBO\n  bindFBO(gl, fbo, texture);\n  // 初始化纹理为透明\n  clearTexture(gl, texture);\n  return {\n    fbo,\n    texture\n  };\n}\nfunction createTexture(gl) {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  // 设置纹理参数（重要！防止边缘闪烁）\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  // 初始空纹理\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.canvas.width, gl.canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n  return texture;\n}\nfunction bindFBO(gl, fbo, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n}\nfunction clearTexture(gl, texture) {\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.canvas.width, gl.canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n}\nfunction createInjectAttrGroup() {\n  const groupData = [];\n  let currentLen = 0;\n  return {\n    addGroup: (name, data) => {\n      var _a, _b;\n      const length = (_b = (_a = data[0]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n      if (length <= 0) {\n        console.warn(`no data found in@${name}, received ${data}`);\n      }\n      if (currentLen && data.length !== currentLen) {\n        console.warn(`length not match@${name}, expected ${currentLen}, received ${data.length}`);\n      }\n      currentLen = data.length;\n      groupData.push({\n        name,\n        length,\n        data\n      });\n    },\n    inject: (gl, program) => {\n      var _a, _b;\n      const value = [];\n      for (let i = 0; i < currentLen; i++) {\n        for (let j = 0; j < groupData.length; j++) {\n          const currentGroup = groupData[j];\n          for (let k = 0; k < currentGroup.length; k++) {\n            value.push((_b = (_a = currentGroup.data[i]) === null || _a === void 0 ? void 0 : _a[k]) !== null && _b !== void 0 ? _b : 0);\n          }\n        }\n      }\n      injectAttr(gl, program, value, groupData);\n    },\n    get length() {\n      return currentLen;\n    }\n  };\n}\nexports.createInjectAttrGroup = createInjectAttrGroup;\nfunction injectVert() {\n  const group = createInjectAttrGroup();\n  // [-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0];\n  group.addGroup('a_position', [[-1.0, -1.0], [1.0, -1.0], [-1.0, 1.0], [1.0, 1.0]]);\n  return group;\n}\nfunction injectUniform(gl, program, name, method) {\n  const n = gl.getUniformLocation(program, name);\n  // @ts-expect-error\n  for (var _len = arguments.length, value = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n    value[_key - 4] = arguments[_key];\n  }\n  gl[method](n, ...value);\n}\nfunction injectTexture(gl, program, name) {\n  let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let img = arguments.length > 4 ? arguments[4] : undefined;\n  let options = arguments.length > 5 ? arguments[5] : undefined;\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n  const texture = gl.createTexture();\n  const sampler = gl.getUniformLocation(program, name);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, ((_a = options === null || options === void 0 ? void 0 : options.flip) !== null && _a !== void 0 ? _a : 1) ? 1 : 0);\n  gl.activeTexture(gl[`TEXTURE${index}`]);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const defaultMinFilter = !(options === null || options === void 0 ? void 0 : options.mipmap) ? gl.NEAREST : gl.LINEAR_MIPMAP_LINEAR;\n  const defaultMaxFilter = !(options === null || options === void 0 ? void 0 : options.mipmap) ? gl.LINEAR : gl.LINEAR;\n  const texParameteri = options === null || options === void 0 ? void 0 : options.texParameteri;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, (_c = (_b = texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri[gl.TEXTURE_MIN_FILTER]) !== null && _b !== void 0 ? _b : texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri['TEXTURE_MIN_FILTER']) !== null && _c !== void 0 ? _c : defaultMinFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, (_e = (_d = texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri[gl.TEXTURE_MAG_FILTER]) !== null && _d !== void 0 ? _d : texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri['TEXTURE_MAG_FILTER']) !== null && _e !== void 0 ? _e : defaultMaxFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, (_g = (_f = texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri[gl.TEXTURE_WRAP_S]) !== null && _f !== void 0 ? _f : texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri['TEXTURE_WRAP_S']) !== null && _g !== void 0 ? _g : gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, (_j = (_h = texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri[gl.TEXTURE_WRAP_T]) !== null && _h !== void 0 ? _h : texParameteri === null || texParameteri === void 0 ? void 0 : texParameteri['TEXTURE_WRAP_T']) !== null && _j !== void 0 ? _j : gl.CLAMP_TO_EDGE);\n  gl.uniform1i(sampler, index);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n  if (options === null || options === void 0 ? void 0 : options.mipmap) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n}\nfunction useInjectGlData(gl, program, canvas, options) {\n  const lastMousePosition = [0, 0];\n  const start = Date.now();\n  function inject() {\n    const now = new Date();\n    // 为 u_time 提供值\n    const time = (now.getTime() - start) / 1000;\n    const uTimeLocation = gl.getUniformLocation(program, 'u_time');\n    gl.uniform1f(uTimeLocation, time);\n    const iTimeLocation = gl.getUniformLocation(program, 'iTime');\n    gl.uniform1f(iTimeLocation, time);\n    // 为 u_mouse 提供值\n    const uMouseLocation = gl.getUniformLocation(program, 'iMouse');\n    gl.uniform2f(uMouseLocation, ...lastMousePosition);\n    const uResolution = gl.getUniformLocation(program, 'u_resolution');\n    gl.uniform2f(uResolution, canvas.clientWidth * options.ratio, canvas.clientHeight * options.ratio);\n    const iResolution = gl.getUniformLocation(program, 'iResolution');\n    gl.uniform3f(iResolution, canvas.clientWidth * options.ratio, canvas.clientHeight * options.ratio, 0);\n    // gl.uniform4f(\n    //     uDateLocation,\n    //     now.getFullYear(),\n    //     now.getMonth() + 1,\n    //     now.getDate(),\n    //     now.getHours() + now.getMinutes() / 60,\n    // );\n    // 为 u_camera 提供值\n    // const uCameraLocation = gl.getUniformLocation(program, 'u_camera');\n    // gl.uniform3f(uCameraLocation, 0.0, 0.0, -2.0);\n    // 为 u_sampleRate 提供值\n    // const uSampleRateLocation = gl.getUniformLocation(program, 'u_sampleRate');\n    // gl.uniform1f(uSampleRateLocation, 44100.0);\n    // 为 iResolution 提供值\n    const iResolutionLocation = gl.getUniformLocation(program, 'iResolution');\n    gl.uniform3f(iResolutionLocation, canvas.clientWidth, canvas.clientHeight, options.ratio);\n  }\n  function setMove(e) {\n    const w = canvas.clientWidth;\n    const h = canvas.clientHeight;\n    lastMousePosition[0] = e.clientX / w;\n    lastMousePosition[1] = e.clientY / h;\n  }\n  canvas.addEventListener('pointermove', setMove);\n  return {\n    inject,\n    destroy: () => {\n      canvas.removeEventListener('pointermove', setMove);\n    }\n  };\n}\nexports.useInjectGlData = useInjectGlData;\nfunction createGlContext(canvas, options) {\n  const gl = canvas.getContext('webgl2', Object.assign({\n    alpha: true,\n    depth: true,\n    premultipliedAlpha: true\n  }, options));\n  if (!gl) {\n    throw new Error(`webgl context create failed`);\n  }\n  setBlend(gl, 'normal');\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n  return gl;\n}\nexports.createGlContext = createGlContext;\nfunction checkShader(gl, shader, source) {\n  var _a;\n  const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!compiled) {\n    const error = gl.getShaderInfoLog(shader);\n    console.error('Shader compile error: ' + error);\n    const [match, file, line] = (_a = /ERROR: ([\\d]+):([\\d]+)/.exec(error !== null && error !== void 0 ? error : '')) !== null && _a !== void 0 ? _a : [];\n    console.error('error line: ', source.split('\\n')[+line - 1]);\n  }\n}\nfunction createProgram(gl, shader) {\n  var _a, _b;\n  const program = gl.createProgram();\n  // 创建顶点着色器\n  const vShader = gl.createShader(gl.VERTEX_SHADER);\n  // 创建片元着色器\n  const fShader = gl.createShader(gl.FRAGMENT_SHADER);\n  if (!program) {\n    throw new Error(`program create failed`);\n  }\n  if (!vShader || !fShader) {\n    throw new Error(`shader create failed`);\n  }\n  const finalVert = (_a = shader === null || shader === void 0 ? void 0 : shader.vert) !== null && _a !== void 0 ? _a : exports.DEFAULT_GL2_VERT;\n  const finalFrag = (_b = shader === null || shader === void 0 ? void 0 : shader.frag) !== null && _b !== void 0 ? _b : exports.DEFAULT_GL2_FRAG;\n  // shader容器与着色器绑定\n  gl.shaderSource(vShader, finalVert);\n  gl.shaderSource(fShader, finalFrag);\n  // 将GLSE语言编译成浏览器可用代码\n  gl.compileShader(vShader);\n  gl.compileShader(fShader);\n  checkShader(gl, vShader, finalVert);\n  checkShader(gl, fShader, finalFrag);\n  // 将着色器添加到程序上\n  gl.attachShader(program, vShader);\n  gl.attachShader(program, fShader);\n  // 链接程序，在链接操作执行以后，可以任意修改shader的源代码，\n  // 对shader重新编译不会影响整个程序，除非重新链接程序\n  gl.linkProgram(program);\n  // 加载并使用链接好的程序\n  gl.useProgram(program);\n  const message = gl.getShaderInfoLog(fShader);\n  if (message && message.length > 0) {\n    /* message may be an error or a warning */\n    throw message;\n  }\n  return program;\n}\nexports.createProgram = createProgram;\nfunction getFinalShaderConfig(options) {\n  var _a, _b;\n  return {\n    vert: (_a = options === null || options === void 0 ? void 0 : options.vert) !== null && _a !== void 0 ? _a : (options === null || options === void 0 ? void 0 : options.vertMain) ? `${simpleVertHeader}${options.vertMain}` : undefined,\n    frag: (_b = options === null || options === void 0 ? void 0 : options.frag) !== null && _b !== void 0 ? _b : (options === null || options === void 0 ? void 0 : options.main) ? `${simpleFragHeader}${options.main}` : undefined\n  };\n}\nfunction simpleInit(canvas, options) {\n  var _a, _b, _c, _d, _e;\n  const ratio = (_a = options === null || options === void 0 ? void 0 : options.ratio) !== null && _a !== void 0 ? _a : DEFAULT_RATIO;\n  const fps = (_b = options === null || options === void 0 ? void 0 : options.fps) !== null && _b !== void 0 ? _b : 40;\n  ensureCanvas(canvas, ratio);\n  const gl = createGlContext(canvas, {\n    preserveDrawingBuffer: (_c = options === null || options === void 0 ? void 0 : options.preserveDrawingBuffer) !== null && _c !== void 0 ? _c : false\n  });\n  const program = createProgram(gl, getFinalShaderConfig(options));\n  const {\n    inject,\n    destroy\n  } = useInjectGlData(gl, program, canvas, {\n    ratio\n  });\n  const injectGroupData = (_d = options === null || options === void 0 ? void 0 : options.attr) !== null && _d !== void 0 ? _d : injectVert();\n  injectGroupData.inject(gl, program);\n  inject();\n  let timer = 0;\n  let lastRender = Date.now();\n  const tickDuration = 1000 / fps;\n  const clearColor = (_e = options.clearColor) !== null && _e !== void 0 ? _e : [0, 0, 0, 0];\n  // FBO处理\n  const {\n    fbo: fbo1,\n    texture: texture1\n  } = initFBO(gl);\n  const {\n    fbo: fbo2,\n    texture: texture2\n  } = initFBO(gl);\n  const FBOCache = [fbo1, fbo2];\n  const FBOTextureCache = [texture1, texture2];\n  const FBOCacheLength = FBOCache.length;\n  // if(options?.postProcess){\n  //     const postPostPrograms = options.postProcess?.map(shaderOptions => createProgram(gl, getFinalShaderConfig(shaderOptions)));\n  // }\n  // FBO处理\n  let currentFBOIndex = 0;\n  let prevFBOIndex = 1;\n  function clear() {\n    // clear\n    gl.clearColor(...clearColor);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n  function draw() {\n    var _a;\n    gl.drawArrays((_a = options === null || options === void 0 ? void 0 : options.drawType) !== null && _a !== void 0 ? _a : gl.TRIANGLE_STRIP, 0, injectGroupData.length);\n  }\n  let currentRenderer = undefined;\n  function loopRender() {\n    const now = Date.now();\n    if (now - lastRender >= tickDuration) {\n      lastRender = now;\n      currentRenderer === null || currentRenderer === void 0 ? void 0 : currentRenderer();\n    }\n    timer = requestAnimationFrame(loopRender);\n  }\n  function renderTickWithLastScene() {\n    // 绑定到当前FBO\n    gl.bindFramebuffer(gl.FRAMEBUFFER, FBOCache[currentFBOIndex]);\n    // 使用上一帧的结果作为纹理输入\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, FBOTextureCache[prevFBOIndex]); // 注意这里使用交换后的texture2\n    // 注入uniform\n    const loc = gl.getUniformLocation(program, 'uPrev');\n    gl.uniform1i(loc, 0);\n    inject();\n    clear();\n    // 绘制到fbo\n    draw();\n    // 解绑FBO，后续绘制到屏幕\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    // 将最终结果绘制到屏幕（使用当前FBO的纹理）\n    gl.bindTexture(gl.TEXTURE_2D, FBOTextureCache[currentFBOIndex]);\n    draw();\n    currentFBOIndex = (currentFBOIndex + 1) % FBOCacheLength;\n    prevFBOIndex = (prevFBOIndex + 1) % FBOCacheLength;\n  }\n  function renderTick() {\n    inject();\n    clear();\n    // 绘制到fbo\n    draw();\n  }\n  if (options.useLastView) {\n    currentRenderer = renderTickWithLastScene;\n  } else {\n    currentRenderer = renderTick;\n  }\n  const api = {\n    gl,\n    inject: function (name, method) {\n      for (var _len2 = arguments.length, value = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        value[_key2 - 2] = arguments[_key2];\n      }\n      injectUniform(gl, program, name, method, ...value);\n    },\n    injectTexture: (name, index, img, options) => {\n      injectTexture(gl, program, name, index, img, options);\n    },\n    createUBO: (index, value) => {\n      // layout(std140) uniform UBO\n      // {\n      //     vec2 data[100];\n      // } ubo;\n      // ubo.data[i];\n      return createUBO(gl, program, index, value);\n    },\n    play: () => {\n      cancelAnimationFrame(timer);\n      loopRender();\n    },\n    stop: () => {\n      cancelAnimationFrame(timer);\n    }\n  };\n  if (options === null || options === void 0 ? void 0 : options.autoPlay) {\n    api.play();\n  }\n  return api;\n}\nexports.simpleInit = simpleInit;\nfunction renderFullScreenCanvas(options) {\n  const canvas = document.createElement('canvas');\n  document.body.style.cssText += `margin:0;padding:0;`;\n  canvas.style.cssText = `display:block;width:100vw;height:100vh;background:transparent;`;\n  document.body.appendChild(canvas);\n  ensureCanvas(canvas);\n  return simpleInit(canvas, options);\n}\nexports.renderFullScreenCanvas = renderFullScreenCanvas;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/common/gl/index.ts\n");

/***/ }),

/***/ "./src/fboTest/index.ts":
/*!******************************!*\
  !*** ./src/fboTest/index.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst gl_1 = __webpack_require__(/*! ../common/gl */ \"./src/common/gl/index.ts\");\nconst frag_glsl_1 = __importDefault(__webpack_require__(/*! ./frag.glsl */ \"./src/fboTest/frag.glsl\"));\nfunction main() {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      gl,\n      play\n    } = (0, gl_1.renderFullScreenCanvas)({\n      main: frag_glsl_1.default,\n      autoPlay: true,\n      // fps:1,\n      clearColor: [1, 1, 1, 0],\n      useLastView: true\n    });\n  });\n}\nmain();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZmJvVGVzdC9pbmRleC50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYi8uL3NyYy9mYm9UZXN0L2luZGV4LnRzP2ZlMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGdsXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2dsXCIpO1xuY29uc3QgZnJhZ19nbHNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZnJhZy5nbHNsXCIpKTtcbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyBnbCwgcGxheSB9ID0gKDAsIGdsXzEucmVuZGVyRnVsbFNjcmVlbkNhbnZhcykoe1xuICAgICAgICAgICAgbWFpbjogZnJhZ19nbHNsXzEuZGVmYXVsdCxcbiAgICAgICAgICAgIGF1dG9QbGF5OiB0cnVlLFxuICAgICAgICAgICAgLy8gZnBzOjEsXG4gICAgICAgICAgICBjbGVhckNvbG9yOiBbMSwgMSwgMSwgMF0sXG4gICAgICAgICAgICB1c2VMYXN0VmlldzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5tYWluKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/fboTest/index.ts\n");

/***/ }),

/***/ "./src/fboTest/frag.glsl":
/*!*******************************!*\
  !*** ./src/fboTest/frag.glsl ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"\\nuniform sampler2D uPrev;\\n\\nvoid main(){\\n    vec2 st=fragCoord.xy/iResolution.xy;\\n    \\n    vec4 last=texture(uPrev,st,1.);\\n    \\n    st.x=st.x+iTime/100. * 2.;\\n    float d=distance(st,vec2(.5));\\n    \\n    vec4 color=last;\\n    // vec4 color=vec4(0.);\\n    // color.a = color.a * .9;\\n    // color.r = color.b * .9;\\n    // color.b = 0.5;\\n    \\n    if(d<.1){\\n        // fragColor=vec4(0.,0.,1.,1.);\\n        color = vec4(0.,0.,1.,1.);\\n    }else{\\n        // fragColor=vec4(0.,0.,0.,.1);\\n        color.a -= 0.01;\\n    }\\n    \\n    fragColor=color;\\n    \\n}\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZmJvVGVzdC9mcmFnLmdsc2wuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFiLy4vc3JjL2Zib1Rlc3QvZnJhZy5nbHNsP2M0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJcXG51bmlmb3JtIHNhbXBsZXIyRCB1UHJldjtcXG5cXG52b2lkIG1haW4oKXtcXG4gICAgdmVjMiBzdD1mcmFnQ29vcmQueHkvaVJlc29sdXRpb24ueHk7XFxuICAgIFxcbiAgICB2ZWM0IGxhc3Q9dGV4dHVyZSh1UHJldixzdCwxLik7XFxuICAgIFxcbiAgICBzdC54PXN0LngraVRpbWUvMTAwLiAqIDIuO1xcbiAgICBmbG9hdCBkPWRpc3RhbmNlKHN0LHZlYzIoLjUpKTtcXG4gICAgXFxuICAgIHZlYzQgY29sb3I9bGFzdDtcXG4gICAgLy8gdmVjNCBjb2xvcj12ZWM0KDAuKTtcXG4gICAgLy8gY29sb3IuYSA9IGNvbG9yLmEgKiAuOTtcXG4gICAgLy8gY29sb3IuciA9IGNvbG9yLmIgKiAuOTtcXG4gICAgLy8gY29sb3IuYiA9IDAuNTtcXG4gICAgXFxuICAgIGlmKGQ8LjEpe1xcbiAgICAgICAgLy8gZnJhZ0NvbG9yPXZlYzQoMC4sMC4sMS4sMS4pO1xcbiAgICAgICAgY29sb3IgPSB2ZWM0KDAuLDAuLDEuLDEuKTtcXG4gICAgfWVsc2V7XFxuICAgICAgICAvLyBmcmFnQ29sb3I9dmVjNCgwLiwwLiwwLiwuMSk7XFxuICAgICAgICBjb2xvci5hIC09IDAuMDE7XFxuICAgIH1cXG4gICAgXFxuICAgIGZyYWdDb2xvcj1jb2xvcjtcXG4gICAgXFxufVxcblwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/fboTest/frag.glsl\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("../../../.config/yarn/global/node_modules/regenerator-runtime/runtime.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/fboTest/index.ts");
/******/ 	
/******/ })()
;