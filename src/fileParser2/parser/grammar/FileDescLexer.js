// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,36,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,3,11,111,8,11,1,12,1,12,5,12,115,8,12,
10,12,12,12,118,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,5,
16,130,8,16,10,16,12,16,133,9,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
1,17,5,17,144,8,17,10,17,12,17,147,9,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,
29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,4,35,226,
8,35,11,35,12,35,227,1,35,5,35,231,8,35,10,35,12,35,234,9,35,1,36,3,36,237,
8,36,1,36,1,36,4,36,241,8,36,11,36,12,36,242,1,37,1,37,5,37,247,8,37,10,
37,12,37,250,9,37,1,37,1,37,1,37,5,37,255,8,37,10,37,12,37,258,9,37,1,37,
3,37,261,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,4,38,270,8,38,11,38,12,
38,271,1,38,1,38,1,39,4,39,277,8,39,11,39,12,39,278,1,39,1,39,4,39,283,8,
39,11,39,12,39,284,3,39,287,8,39,1,40,1,40,1,41,4,41,292,8,41,11,41,12,41,
293,1,41,1,41,3,131,248,256,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,0,23,0,25,0,27,0,29,0,31,0,33,11,35,12,37,13,39,14,41,15,43,16,
45,17,47,18,49,19,51,20,53,21,55,22,57,23,59,24,61,25,63,26,65,27,67,28,
69,29,71,30,73,31,75,32,77,33,79,34,81,35,83,36,1,0,5,4,0,65,90,95,95,97,
122,128,255,1,0,48,57,3,0,48,57,65,70,97,102,2,0,10,10,13,13,2,0,9,9,32,
32,307,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,33,1,0,0,0,
0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,
7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,101,
1,0,0,0,19,104,1,0,0,0,21,106,1,0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,119,
1,0,0,0,29,121,1,0,0,0,31,123,1,0,0,0,33,125,1,0,0,0,35,139,1,0,0,0,37,150,
1,0,0,0,39,153,1,0,0,0,41,160,1,0,0,0,43,165,1,0,0,0,45,171,1,0,0,0,47,176,
1,0,0,0,49,182,1,0,0,0,51,187,1,0,0,0,53,196,1,0,0,0,55,201,1,0,0,0,57,206,
1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,63,215,1,0,0,0,65,217,1,0,0,0,67,219,
1,0,0,0,69,222,1,0,0,0,71,225,1,0,0,0,73,240,1,0,0,0,75,260,1,0,0,0,77,262,
1,0,0,0,79,276,1,0,0,0,81,288,1,0,0,0,83,291,1,0,0,0,85,86,5,58,0,0,86,2,
1,0,0,0,87,88,5,40,0,0,88,4,1,0,0,0,89,90,5,41,0,0,90,6,1,0,0,0,91,92,5,
124,0,0,92,8,1,0,0,0,93,94,5,62,0,0,94,10,1,0,0,0,95,96,5,60,0,0,96,12,1,
0,0,0,97,98,5,91,0,0,98,14,1,0,0,0,99,100,5,93,0,0,100,16,1,0,0,0,101,102,
5,36,0,0,102,103,5,123,0,0,103,18,1,0,0,0,104,105,5,125,0,0,105,20,1,0,0,
0,106,107,7,0,0,0,107,22,1,0,0,0,108,111,3,21,10,0,109,111,3,27,13,0,110,
108,1,0,0,0,110,109,1,0,0,0,111,24,1,0,0,0,112,116,3,21,10,0,113,115,3,23,
11,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,
26,1,0,0,0,118,116,1,0,0,0,119,120,7,1,0,0,120,28,1,0,0,0,121,122,7,2,0,
0,122,30,1,0,0,0,123,124,5,35,0,0,124,32,1,0,0,0,125,126,5,47,0,0,126,127,
5,42,0,0,127,131,1,0,0,0,128,130,9,0,0,0,129,128,1,0,0,0,130,133,1,0,0,0,
131,132,1,0,0,0,131,129,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,135,
5,42,0,0,135,136,5,47,0,0,136,137,1,0,0,0,137,138,6,16,0,0,138,34,1,0,0,
0,139,140,5,47,0,0,140,141,5,47,0,0,141,145,1,0,0,0,142,144,8,3,0,0,143,
142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,
0,0,147,145,1,0,0,0,148,149,6,17,0,0,149,36,1,0,0,0,150,151,5,105,0,0,151,
152,5,102,0,0,152,38,1,0,0,0,153,154,5,101,0,0,154,155,5,108,0,0,155,156,
5,115,0,0,156,157,5,101,0,0,157,158,5,105,0,0,158,159,5,102,0,0,159,40,1,
0,0,0,160,161,5,101,0,0,161,162,5,108,0,0,162,163,5,115,0,0,163,164,5,101,
0,0,164,42,1,0,0,0,165,166,5,101,0,0,166,167,5,110,0,0,167,168,5,100,0,0,
168,169,5,105,0,0,169,170,5,102,0,0,170,44,1,0,0,0,171,172,5,108,0,0,172,
173,5,111,0,0,173,174,5,111,0,0,174,175,5,112,0,0,175,46,1,0,0,0,176,177,
5,119,0,0,177,178,5,104,0,0,178,179,5,105,0,0,179,180,5,108,0,0,180,181,
5,101,0,0,181,48,1,0,0,0,182,183,5,102,0,0,183,184,5,105,0,0,184,185,5,110,
0,0,185,186,5,100,0,0,186,50,1,0,0,0,187,188,5,98,0,0,188,189,5,97,0,0,189,
190,5,99,0,0,190,191,5,107,0,0,191,192,5,70,0,0,192,193,5,105,0,0,193,194,
5,110,0,0,194,195,5,100,0,0,195,52,1,0,0,0,196,197,5,98,0,0,197,198,5,97,
0,0,198,199,5,99,0,0,199,200,5,107,0,0,200,54,1,0,0,0,201,202,5,110,0,0,
202,203,5,101,0,0,203,204,5,120,0,0,204,205,5,116,0,0,205,56,1,0,0,0,206,
207,5,103,0,0,207,208,5,111,0,0,208,209,5,116,0,0,209,210,5,111,0,0,210,
58,1,0,0,0,211,212,5,42,0,0,212,60,1,0,0,0,213,214,5,47,0,0,214,62,1,0,0,
0,215,216,5,43,0,0,216,64,1,0,0,0,217,218,5,45,0,0,218,66,1,0,0,0,219,220,
5,105,0,0,220,221,5,115,0,0,221,68,1,0,0,0,222,223,5,44,0,0,223,70,1,0,0,
0,224,226,3,31,15,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,
228,1,0,0,0,228,232,1,0,0,0,229,231,8,3,0,0,230,229,1,0,0,0,231,234,1,0,
0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,72,1,0,0,0,234,232,1,0,0,0,235,237,
5,13,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,241,5,10,0,
0,239,241,5,13,0,0,240,236,1,0,0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,
1,0,0,0,242,243,1,0,0,0,243,74,1,0,0,0,244,248,5,34,0,0,245,247,9,0,0,0,
246,245,1,0,0,0,247,250,1,0,0,0,248,249,1,0,0,0,248,246,1,0,0,0,249,251,
1,0,0,0,250,248,1,0,0,0,251,261,5,34,0,0,252,256,5,39,0,0,253,255,9,0,0,
0,254,253,1,0,0,0,255,258,1,0,0,0,256,257,1,0,0,0,256,254,1,0,0,0,257,259,
1,0,0,0,258,256,1,0,0,0,259,261,5,39,0,0,260,244,1,0,0,0,260,252,1,0,0,0,
261,76,1,0,0,0,262,263,5,91,0,0,263,264,3,29,14,0,264,269,3,29,14,0,265,
266,5,32,0,0,266,267,3,29,14,0,267,268,3,29,14,0,268,270,1,0,0,0,269,265,
1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,
273,274,5,93,0,0,274,78,1,0,0,0,275,277,3,27,13,0,276,275,1,0,0,0,277,278,
1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,286,1,0,0,0,280,282,5,46,0,0,
281,283,3,27,13,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
1,0,0,0,285,287,1,0,0,0,286,280,1,0,0,0,286,287,1,0,0,0,287,80,1,0,0,0,288,
289,3,25,12,0,289,82,1,0,0,0,290,292,7,4,0,0,291,290,1,0,0,0,292,293,1,0,
0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,6,41,1,0,296,
84,1,0,0,0,18,0,110,116,131,145,227,232,236,240,242,248,256,260,271,278,
284,286,293,2,0,1,0,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FileDescLexer extends antlr4.Lexer {

    static grammarFileName = "FileDesc.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "':'", "'('", "')'", "'|'", "'>'", "'<'", 
                         "'['", "']'", "'${'", "'}'", null, null, "'if'", 
                         "'elseif'", "'else'", "'endif'", "'loop'", "'while'", 
                         "'find'", "'backFind'", "'back'", "'next'", "'goto'", 
                         "'*'", "'/'", "'+'", "'-'", "'is'", "','" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, "BLOCK_COMMENT", "LINE_COMMENT", 
                          "IF", "ELSEIF", "ELSE", "ENDIF", "LOOP", "WHILE", 
                          "FIND", "BACKFIND", "BACK", "NEXT", "GOTO", "ASTERISK", 
                          "SLASH", "PLUS", "MINUS", "IF_ASSERT", "PART_SPLIT", 
                          "GROUP_TITLE", "NEWLINE", "STRING", "BYTE_VALUE", 
                          "NUMBER", "VAR", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "LETTER", "ALL_LETTER", "ID", 
                      "DIGIT", "HEX", "GROUP_SYMBOL", "BLOCK_COMMENT", "LINE_COMMENT", 
                      "IF", "ELSEIF", "ELSE", "ENDIF", "LOOP", "WHILE", 
                      "FIND", "BACKFIND", "BACK", "NEXT", "GOTO", "ASTERISK", 
                      "SLASH", "PLUS", "MINUS", "IF_ASSERT", "PART_SPLIT", 
                      "GROUP_TITLE", "NEWLINE", "STRING", "BYTE_VALUE", 
                      "NUMBER", "VAR", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

FileDescLexer.EOF = antlr4.Token.EOF;
FileDescLexer.T__0 = 1;
FileDescLexer.T__1 = 2;
FileDescLexer.T__2 = 3;
FileDescLexer.T__3 = 4;
FileDescLexer.T__4 = 5;
FileDescLexer.T__5 = 6;
FileDescLexer.T__6 = 7;
FileDescLexer.T__7 = 8;
FileDescLexer.T__8 = 9;
FileDescLexer.T__9 = 10;
FileDescLexer.BLOCK_COMMENT = 11;
FileDescLexer.LINE_COMMENT = 12;
FileDescLexer.IF = 13;
FileDescLexer.ELSEIF = 14;
FileDescLexer.ELSE = 15;
FileDescLexer.ENDIF = 16;
FileDescLexer.LOOP = 17;
FileDescLexer.WHILE = 18;
FileDescLexer.FIND = 19;
FileDescLexer.BACKFIND = 20;
FileDescLexer.BACK = 21;
FileDescLexer.NEXT = 22;
FileDescLexer.GOTO = 23;
FileDescLexer.ASTERISK = 24;
FileDescLexer.SLASH = 25;
FileDescLexer.PLUS = 26;
FileDescLexer.MINUS = 27;
FileDescLexer.IF_ASSERT = 28;
FileDescLexer.PART_SPLIT = 29;
FileDescLexer.GROUP_TITLE = 30;
FileDescLexer.NEWLINE = 31;
FileDescLexer.STRING = 32;
FileDescLexer.BYTE_VALUE = 33;
FileDescLexer.NUMBER = 34;
FileDescLexer.VAR = 35;
FileDescLexer.WHITESPACE = 36;



