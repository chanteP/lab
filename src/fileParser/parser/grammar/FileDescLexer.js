// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,273,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,
11,1,11,1,12,1,12,3,12,108,8,12,1,13,1,13,5,13,112,8,13,10,13,12,13,115,
9,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,5,17,127,8,17,10,
17,12,17,130,9,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,141,
8,18,10,18,12,18,144,9,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
1,31,1,31,1,32,4,32,202,8,32,11,32,12,32,203,1,32,5,32,207,8,32,10,32,12,
32,210,9,32,1,33,3,33,213,8,33,1,33,1,33,4,33,217,8,33,11,33,12,33,218,1,
34,1,34,5,34,223,8,34,10,34,12,34,226,9,34,1,34,1,34,1,34,5,34,231,8,34,
10,34,12,34,234,9,34,1,34,3,34,237,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
35,4,35,246,8,35,11,35,12,35,247,1,35,1,35,1,36,4,36,253,8,36,11,36,12,36,
254,1,36,1,36,4,36,259,8,36,11,36,12,36,260,3,36,263,8,36,1,37,1,37,1,38,
4,38,268,8,38,11,38,12,38,269,1,38,1,38,3,128,224,232,0,39,1,1,3,2,5,3,7,
4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,0,31,0,33,0,35,12,
37,13,39,14,41,15,43,16,45,17,47,18,49,19,51,20,53,21,55,22,57,23,59,24,
61,25,63,26,65,27,67,28,69,29,71,30,73,31,75,32,77,33,1,0,5,4,0,65,90,95,
95,97,122,128,255,1,0,48,57,3,0,48,57,65,70,97,102,2,0,10,10,13,13,2,0,9,
9,32,32,283,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,88,1,0,0,0,11,90,1,
0,0,0,13,92,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,19,98,1,0,0,0,21,101,1,0,
0,0,23,103,1,0,0,0,25,107,1,0,0,0,27,109,1,0,0,0,29,116,1,0,0,0,31,118,1,
0,0,0,33,120,1,0,0,0,35,122,1,0,0,0,37,136,1,0,0,0,39,147,1,0,0,0,41,150,
1,0,0,0,43,155,1,0,0,0,45,161,1,0,0,0,47,166,1,0,0,0,49,175,1,0,0,0,51,180,
1,0,0,0,53,185,1,0,0,0,55,190,1,0,0,0,57,192,1,0,0,0,59,194,1,0,0,0,61,196,
1,0,0,0,63,198,1,0,0,0,65,201,1,0,0,0,67,216,1,0,0,0,69,236,1,0,0,0,71,238,
1,0,0,0,73,252,1,0,0,0,75,264,1,0,0,0,77,267,1,0,0,0,79,80,5,58,0,0,80,2,
1,0,0,0,81,82,5,40,0,0,82,4,1,0,0,0,83,84,5,41,0,0,84,6,1,0,0,0,85,86,5,
105,0,0,86,87,5,115,0,0,87,8,1,0,0,0,88,89,5,124,0,0,89,10,1,0,0,0,90,91,
5,62,0,0,91,12,1,0,0,0,92,93,5,60,0,0,93,14,1,0,0,0,94,95,5,91,0,0,95,16,
1,0,0,0,96,97,5,93,0,0,97,18,1,0,0,0,98,99,5,36,0,0,99,100,5,123,0,0,100,
20,1,0,0,0,101,102,5,125,0,0,102,22,1,0,0,0,103,104,7,0,0,0,104,24,1,0,0,
0,105,108,3,23,11,0,106,108,3,29,14,0,107,105,1,0,0,0,107,106,1,0,0,0,108,
26,1,0,0,0,109,113,3,23,11,0,110,112,3,25,12,0,111,110,1,0,0,0,112,115,1,
0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,28,1,0,0,0,115,113,1,0,0,0,116,
117,7,1,0,0,117,30,1,0,0,0,118,119,7,2,0,0,119,32,1,0,0,0,120,121,5,35,0,
0,121,34,1,0,0,0,122,123,5,47,0,0,123,124,5,42,0,0,124,128,1,0,0,0,125,127,
9,0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,129,1,0,0,0,128,126,1,0,0,0,
129,131,1,0,0,0,130,128,1,0,0,0,131,132,5,42,0,0,132,133,5,47,0,0,133,134,
1,0,0,0,134,135,6,17,0,0,135,36,1,0,0,0,136,137,5,47,0,0,137,138,5,47,0,
0,138,142,1,0,0,0,139,141,8,3,0,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,
1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,142,1,0,0,0,145,146,6,18,0,0,
146,38,1,0,0,0,147,148,5,105,0,0,148,149,5,102,0,0,149,40,1,0,0,0,150,151,
5,108,0,0,151,152,5,111,0,0,152,153,5,111,0,0,153,154,5,112,0,0,154,42,1,
0,0,0,155,156,5,119,0,0,156,157,5,104,0,0,157,158,5,105,0,0,158,159,5,108,
0,0,159,160,5,101,0,0,160,44,1,0,0,0,161,162,5,102,0,0,162,163,5,105,0,0,
163,164,5,110,0,0,164,165,5,100,0,0,165,46,1,0,0,0,166,167,5,98,0,0,167,
168,5,97,0,0,168,169,5,99,0,0,169,170,5,107,0,0,170,171,5,70,0,0,171,172,
5,105,0,0,172,173,5,110,0,0,173,174,5,100,0,0,174,48,1,0,0,0,175,176,5,98,
0,0,176,177,5,97,0,0,177,178,5,99,0,0,178,179,5,107,0,0,179,50,1,0,0,0,180,
181,5,110,0,0,181,182,5,101,0,0,182,183,5,120,0,0,183,184,5,116,0,0,184,
52,1,0,0,0,185,186,5,103,0,0,186,187,5,111,0,0,187,188,5,116,0,0,188,189,
5,111,0,0,189,54,1,0,0,0,190,191,5,42,0,0,191,56,1,0,0,0,192,193,5,47,0,
0,193,58,1,0,0,0,194,195,5,43,0,0,195,60,1,0,0,0,196,197,5,45,0,0,197,62,
1,0,0,0,198,199,5,44,0,0,199,64,1,0,0,0,200,202,3,33,16,0,201,200,1,0,0,
0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,208,1,0,0,0,205,207,
8,3,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,
209,66,1,0,0,0,210,208,1,0,0,0,211,213,5,13,0,0,212,211,1,0,0,0,212,213,
1,0,0,0,213,214,1,0,0,0,214,217,5,10,0,0,215,217,5,13,0,0,216,212,1,0,0,
0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,68,
1,0,0,0,220,224,5,34,0,0,221,223,9,0,0,0,222,221,1,0,0,0,223,226,1,0,0,0,
224,225,1,0,0,0,224,222,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,237,
5,34,0,0,228,232,5,39,0,0,229,231,9,0,0,0,230,229,1,0,0,0,231,234,1,0,0,
0,232,233,1,0,0,0,232,230,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,237,
5,39,0,0,236,220,1,0,0,0,236,228,1,0,0,0,237,70,1,0,0,0,238,239,5,91,0,0,
239,240,3,31,15,0,240,245,3,31,15,0,241,242,5,32,0,0,242,243,3,31,15,0,243,
244,3,31,15,0,244,246,1,0,0,0,245,241,1,0,0,0,246,247,1,0,0,0,247,245,1,
0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,5,93,0,0,250,72,1,0,0,0,251,
253,3,29,14,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,
0,0,0,255,262,1,0,0,0,256,258,5,46,0,0,257,259,3,29,14,0,258,257,1,0,0,0,
259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,256,
1,0,0,0,262,263,1,0,0,0,263,74,1,0,0,0,264,265,3,27,13,0,265,76,1,0,0,0,
266,268,7,4,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,
1,0,0,0,270,271,1,0,0,0,271,272,6,38,1,0,272,78,1,0,0,0,18,0,107,113,128,
142,203,208,212,216,218,224,232,236,247,254,260,262,269,2,0,1,0,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class FileDescLexer extends antlr4.Lexer {

    static grammarFileName = "FileDesc.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "':'", "'('", "')'", "'is'", "'|'", "'>'", 
                         "'<'", "'['", "']'", "'${'", "'}'", null, null, 
                         "'if'", "'loop'", "'while'", "'find'", "'backFind'", 
                         "'back'", "'next'", "'goto'", "'*'", "'/'", "'+'", 
                         "'-'", "','" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, "BLOCK_COMMENT", "LINE_COMMENT", 
                          "IF", "LOOP", "WHILE", "FIND", "BACKFIND", "BACK", 
                          "NEXT", "GOTO", "ASTERISK", "SLASH", "PLUS", "MINUS", 
                          "PART_SPLIT", "GROUP_TITLE", "NEWLINE", "STRING", 
                          "BYTE_VALUE", "NUMBER", "VAR", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "LETTER", "ALL_LETTER", 
                      "ID", "DIGIT", "HEX", "GROUP_SYMBOL", "BLOCK_COMMENT", 
                      "LINE_COMMENT", "IF", "LOOP", "WHILE", "FIND", "BACKFIND", 
                      "BACK", "NEXT", "GOTO", "ASTERISK", "SLASH", "PLUS", 
                      "MINUS", "PART_SPLIT", "GROUP_TITLE", "NEWLINE", "STRING", 
                      "BYTE_VALUE", "NUMBER", "VAR", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

FileDescLexer.EOF = antlr4.Token.EOF;
FileDescLexer.T__0 = 1;
FileDescLexer.T__1 = 2;
FileDescLexer.T__2 = 3;
FileDescLexer.T__3 = 4;
FileDescLexer.T__4 = 5;
FileDescLexer.T__5 = 6;
FileDescLexer.T__6 = 7;
FileDescLexer.T__7 = 8;
FileDescLexer.T__8 = 9;
FileDescLexer.T__9 = 10;
FileDescLexer.T__10 = 11;
FileDescLexer.BLOCK_COMMENT = 12;
FileDescLexer.LINE_COMMENT = 13;
FileDescLexer.IF = 14;
FileDescLexer.LOOP = 15;
FileDescLexer.WHILE = 16;
FileDescLexer.FIND = 17;
FileDescLexer.BACKFIND = 18;
FileDescLexer.BACK = 19;
FileDescLexer.NEXT = 20;
FileDescLexer.GOTO = 21;
FileDescLexer.ASTERISK = 22;
FileDescLexer.SLASH = 23;
FileDescLexer.PLUS = 24;
FileDescLexer.MINUS = 25;
FileDescLexer.PART_SPLIT = 26;
FileDescLexer.GROUP_TITLE = 27;
FileDescLexer.NEWLINE = 28;
FileDescLexer.STRING = 29;
FileDescLexer.BYTE_VALUE = 30;
FileDescLexer.NUMBER = 31;
FileDescLexer.VAR = 32;
FileDescLexer.WHITESPACE = 33;



